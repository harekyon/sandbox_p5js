import Head from "next/head";
import styles from "@/styles/Home.module.scss";
import { useEffect, useRef } from "react";
import { aseEncode, sortColors, timestamp } from "@/localLib/util";
export default function Home() {
  const img = useRef(null);
  const colors = useRef([]);
  const sortMode = useRef(null);
  useEffect(() => {
    const p5 = require("p5");
    let flag = true;
    new p5((p) => {
      p.preload = () => {
        img.current = p.loadImage("sample/sample.jpg");
      };
      p.setup = () => {
        p.createCanvas(window.innerWidth - 100, window.innerHeight - 100);
        p.noCursor();
        p.noStroke();
      };
      p.draw = () => {
        p.background(220);
        let tileCount = p.floor(p.width / p.max(p.mouseX, 5));
        let rectSize = p.width / tileCount;

        img.current.loadPixels();
        colors.current = [];
        for (let gridY = 0; gridY < tileCount; gridY++) {
          for (let gridX = 0; gridX < tileCount; gridX++) {
            let px = p.int(gridX * rectSize);
            let py = p.int(gridY * rectSize);
            let i = (py * img.current.width + px) * 4;
            let c = p.color(
              img.current.pixels[i],
              img.current.pixels[i + 1],
              img.current.pixels[i + 2],
              img.current.pixels[i + 3]
            );
            colors.current.push(c);
          }
        }
        // if (flag) {
        //   console.log(colors.current);
        //   flag = false;
        // }
        sortColors(colors.current, sortMode.current, p);

        let i = 0;
        for (let gridY = 0; gridY < tileCount; gridY++) {
          for (let gridX = 0; gridX < tileCount; gridX++) {
            p.fill(colors.current[i]);
            p.rect(gridX * rectSize, gridY * rectSize, rectSize, rectSize);
            i++;
          }
        }
      };

      p.keyReleased = () => {
        if (p.key == "c" || p.key == "C")
          p.writeFile([aseEncode(colors.current)], timestamp(), "ase");
        if (p.key == "s" || p.key == "S") p.saveCanvas(timestamp(), "png");

        if (p.key == "1") p.loadImage("sample/pic1.jpg", setImage);
        if (p.key == "2") p.loadImage("sample/pic2.jpg", setImage);
        if (p.key == "3") p.loadImage("sample/pic3.jpg", setImage);
        if (p.key == "4") p.loadImage("sample/pic4.jpg", setImage);

        if (p.key == "5") sortMode.current = null;
        if (p.key == "6") sortMode.current = "hue";
        if (p.key == "7") sortMode.current = "saturation";
        if (p.key == "8") sortMode.current = "brightness";
        if (p.key == "9") sortMode.current = "grayscale";
      };

      function setImage(loadedImageFile) {
        img.current = loadedImageFile;
      }
    }, "#canvas");
  }, []);

  // useEffect(() => {
  //   const p5 = require("p5");
  //   new p5((p) => {
  //     p.setup = () => {
  //       p.createCanvas(400, 400);
  //       p.background(0);
  //     };
  //     p.draw = () => {
  //       p.background(0);
  //       p.ellipse(p.mouseX, p.mouseY, 40, 40);
  //     };
  //   }, "canvas");
  // }, []);
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <h3>画像で作るカラーパレット</h3>
        {/* <Link href="/installConsidation/">導入・実装方法のパターン</Link> */}
        <cancas id="canvas"></cancas>
      </main>
    </>
  );
}
