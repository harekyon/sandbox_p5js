import Head from "next/head";
import styles from "@/styles/Home.module.scss";
import { useEffect, useRef } from "react";
import { aseEncode, timestamp } from "@/localLib/util";
const tileCountX = 50;
const tileCountY = 10;
const hueValues = [];
const brightnessValues = [];
const saturationValues = [];
export default function Home() {
  useEffect(() => {
    const p5 = require("p5");
    let colorCount = 20;
    let hueValues = [];
    let saturationValues = [];
    let actRandomSeed = 0;

    new p5((p) => {
      p.setup = () => {
        p.createCanvas(window.innerWidth - 100, window.innerHeight - 100);
        p.colorMode(p.HSB, 360, 100, 100, 100);
        p.noStroke();
      };
      p.draw = () => {
        p.noLoop();
        p.randomSeed(p.actRandomSeed);
        for (let i = 0; i < colorCount; i++) {
          if (i % 2 === 0) {
            hueValues[i] = p.random(130, 220);
            saturationValues[i] = 100;
            brightnessValues[i] = p.random(15, 100);
          } else {
            hueValues[i] = 195;
            saturationValues[i] = p.random(20, 100);
            brightnessValues[i] = 100;
          }
        }
        let counter = 0;
        let rowCount = p.int(p.random(5, 30));
        let rowHeight = p.height / rowCount;
        for (let i = rowCount; i >= 0; i--) {
          let partCount = i + 1;
          let parts = [];
          //上から順にセパレートする数が増える
          for (let ii = 0; ii < partCount; ii++) {
            if (p.random() < 0.047) {
              let fragments = p.int(p.random(2, 20));
              partCount = partCount + fragments;
              for (let iii = 0; iii < fragments; iii++) {
                parts.push(p.random(2));
              }
            } else {
              parts.push(p.random(2, 20));
            }
          }
          let sumPartsTotal = 0;
          for (let ii = 0; ii < partCount; ii++) {
            sumPartsTotal += parts[ii];
          }
          let sumPartsNow = 0;
          for (let ii = 0; ii < parts.length; ii++) {
            sumPartsNow += parts[ii];
            let x = p.map(sumPartsNow, 0, sumPartsTotal, 0, p.width);
            let y = rowHeight * i;
            let w = -p.map(parts[ii], 0, sumPartsTotal, 0, p.width);
            let h = rowHeight;

            let index = counter % colorCount;
            let col = p.color(
              hueValues[index],
              saturationValues[index],
              brightnessValues[index]
            );
            p.fill(col);
            p.rect(x, y, w, h);
            counter++;
          }
        }
      };

      p.mouseReleased = () => {
        actRandomSeed = p.random(100000);
        p.loop();
      };

      p.keyReleased = () => {
        if (p.key === "s" || p.key === "S") p.saveCanvas(timestamp(), "png");
        if (p.key === "c" || p.key === "C") {
          let colors = [];
          for (let i = 0; i < hueValues.length; i++) {
            colors.push(p.color(hueValues[i], saturationValues[i], brightnessValues[i]));
          }
          p.writeFile([aseEncode(colors), timestamp(), "ase"]);
        }
      };
    }, "#canvas");
  }, []);

  return (
    <>
      <Head>
        <title>random rect, random color</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <h3>random rect, random color</h3>
        <cancas id="canvas"></cancas>
      </main>
    </>
  );
}
