import Head from "next/head";
import styles from "@/styles/Home.module.scss";
import { useEffect } from "react";
import { timestamp } from "@/localLib/util";
export default function Home() {
  useEffect(() => {
    const p5 = require("p5");

    let tileCount = 20;

    let tileWidth;
    let tileHeight;
    let shapeSize = 50;
    let newShapeSize = shapeSize;
    let shapeAngle = 0;
    let maxDist;
    let currentShape;
    let shapes;

    let sizeMode = 0;
    new p5((p) => {
      p.preload = () => {
        shapes = [];
        shapes.push(p.loadImage("/P_2_1_1_04/module_1.svg"));
        shapes.push(p.loadImage("/P_2_1_1_04/module_2.svg"));
        shapes.push(p.loadImage("/P_2_1_1_04/module_3.svg"));
        shapes.push(p.loadImage("/P_2_1_1_04/module_4.svg"));
        shapes.push(p.loadImage("/P_2_1_1_04/module_5.svg"));
        shapes.push(p.loadImage("/P_2_1_1_04/module_6.svg"));
        shapes.push(p.loadImage("/P_2_1_1_04/module_7.svg"));
      };
      p.setup = () => {
        p.createCanvas(600, 600);
        p.imageMode(p.CENTER);
        currentShape = shapes[0];
        tileWidth = p.width / tileCount;
        tileHeight = p.height / tileCount;
        maxDist = p.sqrt(p.pow(p.width, 2) + p.pow(p.height, 2));
        // actStrokeCap = p.ROUND;
      };
      p.draw = () => {
        p.clear();

        for (let gridY = 0; gridY < tileCount; gridY++) {
          for (let gridX = 0; gridX < tileCount; gridX++) {
            let posX = tileWidth * gridX + tileWidth / 2;
            let posY = tileHeight * gridY + tileWidth / 2;

            let angle =
              p.atan2(p.mouseY - posY, p.mouseX - posX) + shapeAngle * (p.PI / 180);

            if (sizeMode === 0) newShapeSize = shapeSize;
            if (sizeMode === 1)
              newShapeSize =
                shapeSize * 1.5 -
                p.map(p.dist(p.mouseX, p.mouseY, posX, posY), 0, 500, 5, shapeSize);
            if (sizeMode === 2)
              newShapeSize = p.map(
                p.dist(p.mouseX, p.mouseY, posX, posY),
                0,
                500,
                5,
                shapeSize
              );

            p.push();
            p.translate(posX, posY);
            p.rotate(angle);
            p.noStroke();
            p.image(currentShape, 0, 0, newShapeSize, newShapeSize);
            p.pop();
          }
        }
      };
      p.keyReleased = () => {
        if (p.key == "s" || p.key == "S") p.saveCanvas(timestamp(), "png");
        if (p.key == "d" || p.key == "D") sizeMode = (sizeMode + 1) % 3;
        if (p.key == "g" || p.key == "G") {
          tileCount += 5;
          if (tileCount > 20) {
            tileCount = 10;
          }
          tileWidth = p.width / tileCount;
          tileHeight = p.height / tileCount;
        }

        if (p.key == "1") currentShape = shapes[0];
        if (p.key == "2") currentShape = shapes[1];
        if (p.key == "3") currentShape = shapes[2];
        if (p.key == "4") currentShape = shapes[3];
        if (p.key == "5") currentShape = shapes[4];
        if (p.key == "6") currentShape = shapes[5];
        if (p.key == "7") currentShape = shapes[6];

        if (p.keyCode == p.UP_ARROW) shapeSize += 5;
        if (p.keyCode == p.DOWN_ARROW) shapeSize = p.max(shapeSize - 5, 5);
        if (p.keyCode == p.LEFT_ARROW) shapeAngle += 5;
        if (p.keyCode == p.RIGHT_ARROW) shapeAngle -= 5;
      };
    }, "#canvas");
  }, []);

  return (
    <>
      <Head>
        <title>グリッドと整列(p2_1_1_04)</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <h3>グリッドと整列(p2_1_1_04)</h3>
        <div>key1~7:図形変更, s:save png, d:図形サイズ調整, g:図形の量変更</div>
        <cancas id="canvas"></cancas>
      </main>
    </>
  );
}
