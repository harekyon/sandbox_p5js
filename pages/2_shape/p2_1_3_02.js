import Head from "next/head";
import styles from "@/styles/Home.module.scss";
import { useEffect } from "react";
import { timestamp } from "@/localLib/util";
import { random } from "chroma-js";
export default function Home() {
  useEffect(() => {
    const p5 = require("p5");
    let count = 10;

    let colorStep = 20;
    let lineWeight = 0;
    let strokeColor = 0;
    let backgroundColor = 0;

    let dragMode = 1;

    new p5((p) => {
      p.setup = () => {
        p.createCanvas(windowWidth, windowHeight);
      };
      p.draw = () => {
        p.background(backgroundColor);

        let tileCountX = p.mouseX / 30 + 1;
        let tileCountY = p.mouseY / 30 + 1;
        let tileWidth = p.width / tileCountX;
        let tileHeight = p.height / tileCountY;

        for (let gridY = 0; gridY <= tileCountY; gridY++) {
          for (let gridX = 0; gridX <= tileCountX; gridX++) {
            let posX = tileWidth * gridX;
            let posY = tileHeight * gridY;

            let x1 = tileWidth / 2;
            let y1 = tileHeight / 2;
            let x2 = 0;
            let y2 = 0;

            p.push();
            p.translate(posX, posY);

            for (let side = 0; side < 4; side++) {
              for (let i = 0; i < count; i++) {
                switch (side) {
                  case 0:
                    x2 += tileWidth / count;
                    y2 = 0;
                    break;
                  case 1:
                    x2 = tileWidth;
                    y2 += tileHeight / count;
                    break;
                  case 2:
                    x2 -= tileWidth / count;
                    y2 = tileHeight;
                    break;
                  case 3:
                    x2 = 0;
                    y2 -= tileHeight / count;
                    break;
                }
                if (i < count / 2) {
                  // lineWeight += 1;
                }
              }
            }
          }
        }
      };
      p.mousePressed = () => {
        actRandomSeed = random(100000);
      };
      p.keyReleased = () => {
        if (p.key == "s" || p.key == "S") p.saveCanvas(timestamp(), "png");
      };
    }, "#canvas");
  }, []);

  return (
    <>
      <Head>
        <title>グリッドと複合モジュール1(p2_1_3_01)</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <h3>グリッドと複合モジュール1(p2_1_3_01)</h3>
        <div>s:save png</div>
        <cancas id="canvas"></cancas>
      </main>
    </>
  );
}
